#!/usr/bin/env python
"""
Pipeline Trigger Service

This script monitors directories for new images and processes them directly.
It uses the existing Monitor class from the gppy codebase.
"""

import time
import logging
from pathlib import Path
from gppy.services.monitor import Monitor
from gppy.wrapper import DataReduction
from gppy.services.queue import QueueManager
from gppy.services.scheduler import Scheduler

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("/var/log/pipeline-trigger.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


def process_new_images(image_paths):
    """
    Process new images using the existing pipeline infrastructure.
    This is the same function used in the original start_monitoring.
    """
    try:
        logger.info(f"Processing {len(image_paths)} new images")
        queue = QueueManager()
        dr = DataReduction.from_list(image_paths)
        dr.create_config()
        configs = dr.config_list()
        dr.cleanup()
        del dr
        sc = Scheduler(*configs)
        queue.add_scheduler(sc)
        queue.wait_until_task_complete("all")
        logger.info(f"Successfully processed {len(image_paths)} images")
    except Exception as e:
        logger.error(f"Error processing images: {e}")


def trigger_processor(image_paths):
    """
    Process new images directly when detected.
    This function is called by the Monitor when new images are found.
    """
    try:
        logger.info(f"New images detected: {len(image_paths)} images")
        process_new_images(image_paths)
    except Exception as e:
        logger.error(f"Failed to process images: {e}")


def start_trigger_monitoring():
    """Start the trigger monitoring service using the existing Monitor class."""
    from gppy.const import RAWDATA_DIR

    # Create the monitor using the existing codebase
    monitor = Monitor(base_path=Path(RAWDATA_DIR))
    monitor.add_callback(trigger_processor)
    observer = monitor.start()

    logger.info("Trigger service started - monitoring directories for new images")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("Trigger service stopping...")
        observer.stop()

    observer.join()
    logger.info("Trigger service stopped")


if __name__ == "__main__":
    start_trigger_monitoring()
