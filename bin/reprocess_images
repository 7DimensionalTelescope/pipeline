#!/usr/bin/env python
from gppy.run import run_scidata_reduction
import argparse
import os
import sys
import signal

# Set up signal handler for SIGINT (Ctrl+C)
def signal_handler(sig, frame):
    print("\nTerminate process")
    sys.exit(0)


signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Reprocess data in a folder")
    parser.add_argument("-d", type=str, help="Date")
    parser.add_argument("-o", type=str, help="Object name")
    parser.add_argument("-u", type=str, help="Unit name")

    parser.add_argument("-f", type=str, help="Filter name")
    parser.add_argument("-g", type=str, help="Gain")
    parser.add_argument("-b", type=str, help="Number of bins")

    parser.add_argument("-overwrite", type=bool, help="Overwrite", default=False)

    args = parser.parse_args()
    try:
        if args.d is None:
            while True:
                date = input("input date of observation: ")
                if date:
                    break
                else:
                    print("The date of observation cannot be empty.")
        else:
            date = args.d

        if args.o is None:
            while True:
                object_name = input("input object name: ")
                if object_name:
                    break
                else:
                    print("The object name cannot be empty.")
        else:
            object_name = args.o
        if args.u is None:
            while True:
                unit_name = input("input unit name: ")
                if unit_name:
                    break
                else:
                    print("The unit name cannot be empty.")
        else:
            unit_name = args.u
        if args.f is None:
            while True:
                filter_name = input("input filter name: ")
                if filter_name:
                    break
                else:
                    print("The filter name cannot be empty.")
        else:
            filter_name = args.f
        if args.g is None:
            while True:
                gain = input("input gain: ")
                if gain:
                    break
                else:
                    print("The gain cannot be empty.")
        else:
            gain = args.g
        if args.b is None:
            while True:
                bins = input("input number of bins: ")
                if bins:
                    break
                else:
                    print("The number of bins cannot be empty.")
        else:
            bins = args.b

        obs_params = {
            "date": date,
            "obj": object_name,
            "unit": unit_name,
            "filter": filter_name,
            "gain": gain,
            "n_binning": bins,
        }

        run_scidata_reduction(obs_params, processes=["preprocess", "astrometry", "photometry"])

    except Exception as e:
        print(f"\nError: {e}")
        sys.exit(1)
